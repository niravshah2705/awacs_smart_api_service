# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Product {
  productCode: ID!
  productName: String!
  company:String!
  quantity:Float!
  freeQuantity:Float
  schemePercentage:Float
  closing:Float
  drugType: String
  strength:String
  pack:String!
  mrp:Float!
  ptr:Float
  pts:Float
  batchId: String
  hsn: String
  TaxableAmount: Float
  	remarks: String
 	batch: String
	expiry: String
	rate: Float
	amount: Float
	discount: Float
	discountAmount: Float
	addlScheme: Float
	addlSchemeAmount: Float
	addlDiscount: Float
	addlDiscountAmount: Float
	deductableBeforeDiscount: Float
	mrpInclusiveTax: Boolean
	vatApplication: String
	vat: Float
	addlTax: Float
	cst: Float
	sGST: Float
	cGST: Float
	iGST: Float
	orderNumber: String
	orderDate: String
	barcode: String
	orderSource: String  
	baseSchemeQuantity: Float
	baseSchemeFreeQuantity: Float
	sgstAmount: Float
	cgstAmount: Float
	igstAmount: Float
	cess: Float
	cessAmount: Float
  distributors:[User!]
}

type AWACSProduct {
  productCode: ID!
  productName: String!
  brand: String!
  company:String!
  drugType: String
  strength:String
  pack:String!
  mrp:Float!
  ptr:Float
  pts:Float
}

type User {
id: ID!
changePasswordOnLogon: Boolean
pictureId: Int
workspaceId: Int!
username: String!
role: String!
name: String!
address1: String!
address2: String
address3: String
cityId: Int!
city: String!
state: String!
stateId: Int!
country: String!
phoneNo: String!
mobile: String!
email: String!
isLiveorderBlocked: Boolean
isVerify: Boolean
isAdmin: Boolean
isAdminDelegate: String
isAdhoc: String
deviceId: String
gCMRegisterKey: String
type: String
loginType: String!
providerId: Int
providerType: String
awacsId: String
pOBOTP: String
gSTIN: String
pincode: String
registrationId: String
source: String
sourceType: String
signSource: String
signDetail: String
deleted: String
deletedBy: Int
deletedOn: String
lastActivity: String
appVersion: String
oSVersion: String
platform: String
userKind: String
bank: String
iFSCCode: String
userId: String!
}



type Order {
  	id:ID!
	source:String
	buyerId:String
	orderNumber:String!
	orderDate:String
	supplierId:String!
	takenOn: String
	deliveryOption: String
	deliveryMode:String
	remarks:String
	workspaceId:Int
	status:String
	invoiceNumber:String
	isBounced:Boolean
 products:[Product!]!
}


type Invoice {
	id: ID!
	developerId: String
	supplierId: String!
	billNumber: String!
	billDate: String!
	challanNumber: String
	challanDate: String
	buyerId: String!
	reason: String
	upc: String
	paymentDueDate: String
	netInvoiceAmount: Float
	netPurchaseAmount: Float
	lastTransactionDate: String
	receivedOn: String
	emailPrepared: Boolean
	emailPreparedOn: String
	taken: String
	takenOn: String
	lastHostAddress: String
	workspaceId: Int
	ede2_Taken: Boolean
	ede2_TakenDate: String
	ede2_TakenBatchID: String
	taxableAmount: Float
    products:[Product!]!
	suppliers:[User!]!
	buyers:[User!]!

	
}


type Query {
  products(productName: String!): [Product!]!
  productsAwacs(productName: String!): [AWACSProduct!]!
  productByItemCode(itemCode: ID!): [AWACSProduct!]!
  userById(id:ID!):User!
  userByUserName(username: String!):User!
  userByMobile(mobile: String!):User!
  orderByUserId(buyerId: String!):[Order!]!
  invoiceByBillNumber(billNumber: String!): [Invoice!]!
}

input NewProduct {
  productName: String!
}

type Mutation {
  createProduct(input: NewProduct!): Product!

}